<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADxF7wA8Re8APEXvADxF7wA8Re8AAAAAADxF
        7wA8Re8APEXvADxF7wA8Re8APEXvADxF7wA8Re8APEXvADxF7wA8Re8APEXvADxF7wA8Re8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBTe8AQEvvCEBL7whAS+8IQEvvCEBL
        7whBTe8AQEvvCEBL7whAS+8IQEvvCEBL7whAS+8IQEvvCEBL7whAS+8IQEvvCEBL7whAS+8IQEvvCEBL
        7whBTe8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZU8AJFVPAQRVTwEEVU
        8BBFVPAQRVTwEEZU8AJFVPAQRVTwEEVU8BBFVPAQRVTwEEVU8BBFVPAQRVTwEEVU8BBFVPAQRVTwEEVU
        8BBFVPAQRVTwEEZU8AIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS17wAktd
        8BhLXfAYS13wGEtd8BhLXfAYS17wAktd8BhLXfAYS13wGEtd8BhLXfAYS13wGEtd8BhLXfAYS13wGEtd
        8BhLXfAYS13wGEtd8BhLXfAYS17wAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABRZvEEUWbxIFFm8SBRZvEgUWbxIFFm8SBRZvEEUWbxIFFm8SBRZvEgUWbxIFFm8SBRZvEgUWbxIFFm
        8SBRZvEgUWbxIFFm8SBRZvEgUWbxIFFm8SBRZvEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFZw8gRWcPIoVnDyKFZw8ihWcPIoVnDyKFZw8gRWcPIoVnDyKFZw8ihWcPIoVnDyKFZw
        8ihWcPIoVnDyKFZw8ihWcPIoVnDyKFZw8ihWcPIoVnDyKFZw8gQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAWnbyAFx58ipcefIwXHnyMFx58jBcefIwXHnyBlx58jBcefIwXHnyMFx5
        8jBcefIwXHnyMFx58jBcefIwXHnyMFx58jBcefIwXHnyMFx58jBcefIqWnbyAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjLVCDIx1CQyMdQkMjHUJDIx1CQwLtMEMjHUJDIx
        1CQyMdQkMjHUJDIx1CQyMdQkMjHUJDIx1CQyMdQkMjHUJDIx1CQyMdQkMjHUJDk+2QQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACki0gQpItDfKSLQ/yki0P8pItD/KSLQ/yki
        0B4pItD/KSLQ/yki0P8pItD/KSLQ/yki0P8pItD/KSLQ/yki0P8pItD/KSLQ/yki0P8pItD/KSLQ3yki
        0QgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKSLTHiki0/8pItP/KSLT/yki
        0/8pItP/KSLTHiki0/8pItP/KSLT/yki0/8pItP/KSLT/yki0/8pItP/KSLT/yki0/8pItP/KSLT/yki
        0/8pItP/KSLTHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoIdUeKCHV/ygh
        1f8oIdX/KCHV/ygh1f8oIdUeKCHV/ygh1f8oIdX/KCHV/ygh1f8oIdX/KCHV/ygh1f8oIdX/KCHV/ygh
        1f8oIdX/KCHV/ygh1f8oIdUeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgg
        2B4oINj/KCDY/ygg2P8oINj/KCDY/ygg2B4oINj/KCDY/ygg2P8oINj/KCDY/ygg2P8oINj/KCDY/ygg
        2P8oINj/KCDY/ygg2P8oINj/KCDY/ygg2B4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAJyDbHicg2/8nINv/JyDb/ycg2/8nINv/JyDbHicg2/8nINv/JyDb/ycg2/8nINv/JyDb/ycg
        2/8nINv/JyDb/ycg2/8nINv/JyDb/ycg2/8nINv/JyDbHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAnH94eJx/e/ycf3v8nH97/Jx/e/ycf3v8nH94eJx/e/ycf3v8nH97/Jx/e/ycf
        3v8nH97/Jx/e/ycf3v8nH97/Jx/e/ycf3v8nH97/Jx/e/ycf3v8nH94eAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACYe4B4mHuD/Jh7g/yYe4P8mHuD/Jh7g/yYe4B4mHuD/Jh7g/yYe
        4P8mHuD/Jh7g/yYe4P8mHuD/Jh7g/yYe4P8mHuD/Jh7g/yYe4P8mHuD/Jh7g/yYe4B4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJR7jHiUe4/8lHuP/JR7j/yUe4/8lHuP/JR7jHiUe
        4/8lHuP/JR7j/yUe4/8lHuP/JR7j/yUe4/8lHuP/JR7j/yUe4/8lHuP/JR7j/yUe4/8lHuP/JR7jHgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlHeYeJR3m/yUd5v8lHeb/JR3m/yUd
        5v8lHeYeJR3m/yUd5v8lHeb/JR3m/yUd5v8lHeb/JR3m/yUd5v8lHeb/JR3m/yUd5v8lHeb/JR3m/yUd
        5v8lHeYeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQc6R4kHOn/JBzp/yQc
        6f8kHOn/JBzp/yQc6R4kHOn/JBzp/yQc6f8kHOn/JBzp/yQc6f8kHOn/JBzp/yQc6f8kHOn/JBzp/yQc
        6f8kHOn/JBzp/yQc6R4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJR3rHiUd
        6/8lHev/JR3r/yUd6/8lHev/JR3rHiUd6/8lHev/JR3r/yQc60YkHOurJR3r/yUd6/8lHev/JR3r/yQc
        66skHOtGJR3r/yUd6/8lHev/JR3rHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAApJeweKSXs/ykl7P8pJez/KSXs/ykl7P8pJeweKSXs/ykl7P8pJez/KSLQEiki0j4oJOyrKSXs/ykl
        7P8oJOyrKSLSPiki1BYpJez/KSXs/ykl7P8pJeweAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAC8u7R4vLu3/Ly7t/y8u7f8vLu3/Ly7t/y8u7R4vLu3/Ly7t/y8u7f8oIdUeKCHV8ygh
        2D4uLe2nLi3tpygh2D4oIdXzKCHVHi8u7f8vLu3/Ly7t/y8u7R4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAANDjuHjQ47v80OO7/NDju/zQ47v80OO7/NDjuHjQ47v80OO7/NDju/ycf
        2x4nH9v/Jx/b8ycf3VonH91aJx/b8ycf2/8nH9seNDju/zQ47v80OO7/NDjuHgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6Qe4eOkHu/zpB7v86Qe7/OkHu/zpB7v86Qe4eOkHu/zpB
        7v86Qe7/Jh7hHiYe4f8mHuH/Jh7h/yYe4f8mHuH/Jh7h/yYe4R46Qe7/OkHu/zpB7v86Qe4eAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBK7x5ASu//QErv/0BK7/9ASu//QErv/0BK
        7x5ASu//QErv/0BK7/8kHOceJBzn/yQc5/8kHOf/JBzn/yQc5/8kHOf/JBznHkBK7/9ASu//QErv/0BK
        7x4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARVTwHkVU8P9FVPD/RVTw/0VU
        8P9FVPD/RVTwHkVU8P9FVPD/RVTw/ygj7B4oI+z/KCPs/ygj7P8oI+z/KCPs/ygj7P8oI+weRVTw/0VU
        8P9FVPD/RVTwHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABLXfAeS13w/0td
        8P9LXfD/S13w/0td8P9LXfAeS13w/0td8P9LXfD/NDftHjQ37f80N+3/NDft/zQ37f80N+3/NDft/zQ3
        7R5LXfD/S13w/0td8P9LXfAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFm
        8R5RZvH/UWbx/1Fm8f9RZvH/UWbx/1Fm8R5RZvH/UWbx/1Fm8f9ATO8eQEzv/0BM7/9ATO//QEzv/0BM
        7/9ATO//QEzvHlFm8f9RZvH/UWbx/1Fm8R4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVnDyHlZw8v9WcPL/VnDy/1Zw8v9WcPL/VnDyHlZw8v9WcPL/VnDy/01g8B5NYPD/TWDw/01g
        8P9NYPD/TWDw/01g8P9NYPAeVnDy/1Zw8v9WcPL/VnDyHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABadvIIXHjy31x58v9cefL/XHny/1x58v9cefIeXHny/1x58v9cefL/XHnyMlh0
        8udZdfL/WXXy/1l18v9ZdfL/WHTy51x58jJcefL/XHny/1x48t9advIEAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABffvMEX37zHl9+8x5ffvMeX37zHl9+8wRffvMeX37zHl9+
        8x5ffvMMX37zDF9+8x5ffvMeX37zHl9+8x5ffvMMX37zDF9+8x5ffvMeX37zCAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////////////////////BAAP/wQ
        AD/8EAA//BAAP/wQAD/8EAA//BAAP/wQAD/8EAA//BAAP/wRAj/8EYY//BFKP/wRMj/8EQI//BECP/wR
        Aj/8EQI//BECP/wRAj/8EQI///////////8=
</value>
  </data>
</root>